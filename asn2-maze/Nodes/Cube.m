//
//  Cube.m
//  asn2-maze
//
//  Created by Jason Sekhon on 2019-03-12.
//  Copyright Â© 2019 Jason Sekhon. All rights reserved.
//

#import "Cube.h"

@implementation Cube

const Vertex Vertices4[] = {
    // Front
    {{1, -1, 1}, {1, 0}, {0, 0, 1}}, // 0
    {{1, 1, 1}, {1, 1}, {0, 0, 1}}, // 1
    {{-1, 1, 1}, {0, 1}, {0, 0, 1}}, // 2
    
    {{-1, 1, 1}, {0, 1}, {0, 0, 1}}, // 2
    {{-1, -1, 1}, {0, 0}, {0, 0, 1}}, // 3
    {{1, -1, 1}, {1, 0}, {0, 0, 1}}, // 0
    
    // Back
    {{-1, -1, -1}, {1, 0}, {0, 0, -1}}, // 4
    {{-1, 1, -1}, {1, 1}, {0, 0, -1}}, // 5
    {{1, 1, -1}, {0, 1}, {0, 0, -1}}, // 6
    
    {{1, 1, -1}, {0, 1}, {0, 0, -1}}, // 6
    {{1, -1, -1}, {0, 0}, {0, 0, -1}}, // 7
    {{-1, -1, -1}, {1, 0}, {0, 0, -1}}, // 4
    
    // Left
    {{-1, -1, 1}, {1, 0}, {-1, 0, 0}}, // 8
    {{-1, 1, 1}, {1, 1}, {-1, 0, 0}}, // 9
    {{-1, 1, -1}, {0, 1}, {-1, 0, 0}}, // 10
    
    {{-1, 1, -1}, {0, 1}, {-1, 0, 0}}, // 10
    {{-1, -1, -1}, {0, 0}, {-1, 0, 0}}, // 11
    {{-1, -1, 1}, {1, 0}, {-1, 0, 0}}, // 8
    
    // Right
    {{1, -1, -1}, {1, 0}, {1, 0, 0}}, // 12
    {{1, 1, -1}, {1, 1}, {1, 0, 0}}, // 13
    {{1, 1, 1}, {0, 1}, {1, 0, 0}}, // 14
    
    {{1, 1, 1}, {0, 1}, {1, 0, 0}}, // 14
    {{1, -1, 1}, {0, 0}, {1, 0, 0}}, // 15
    {{1, -1, -1}, {1, 0}, {1, 0, 0}}, // 12
    
    // Top
    {{1, 1, 1}, {1, 0}, {0, 1, 0}}, // 16
    {{1, 1, -1}, {1, 1}, {0, 1, 0}}, // 17
    {{-1, 1, -1},  {0, 1}, {0, 1, 0}}, // 18
    
    {{-1, 1, -1},  {0, 1}, {0, 1, 0}}, // 18
    {{-1, 1, 1}, {0, 0}, {0, 1, 0}}, // 19
    {{1, 1, 1}, {1, 0}, {0, 1, 0}}, // 16
    
    // Bottom
    {{-1, -1, 1}, {1, 0}, {0, -1, 0}}, // 20
    {{-1, -1, -1}, {1, 1}, {0, -1, 0}}, // 21
    {{1, -1, -1}, {0, 1}, {0, -1, 0}}, // 22
    
    {{1, -1, -1}, {0, 1}, {0, -1, 0}}, // 22
    {{1, -1, 1}, {0, 0}, {0, -1, 0}}, // 23
    {{-1, -1, 1}, {1, 0}, {0, -1, 0}}, // 20
};

- (instancetype)initWithShader:(GLKBaseEffect *)shader {
    
    if ((self = [super initWithName:"square" shader:shader
                           vertices:(Vertex *)Vertices4
                        vertexCount:sizeof(Vertices4) / sizeof(Vertices4[0])])) {
        
        self.diffuseColor = GLKVector4Make(1, 1, 1, 1);
        self.specularColor = GLKVector4Make(1, 1, 1, 1);
        self.shininess = 10;
        
        [self loadTexture:@"crate.jpg"];
        
    }
    return self;
}

- (void)updateWithDelta:(GLfloat)aDelta {
    self.rotationZ += M_PI * aDelta;
    self.rotationY += M_PI * aDelta;
    self.rotationX += M_PI * aDelta;
}

@end
